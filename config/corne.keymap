#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// layers
#define DEF       0
#define LOWER     1
#define RAISE     2
#define ADJUST    3


// #include "keys/36.h"
// #include "includes/macros.dtsi"
// #include "includes/combos.dtsi"
// #include "includes/behaviors.dtsi"

// ╰─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────╯
//                     │SEC THMB │PRM THMB │TER THMB │   │TER THMB │PRM THMB │SEC THMB │
//                     │   MED   │  NUM    │ LSHIFT  │   │  NAV    │CTRL+DEL │  FUN    │
//                     │ Sk SHFT │ REPEAT  │  Tab    │   │  SPACE  │  DEL    │ SK CTRL │
//                     ╰─────────────────────────────╯   ╰─────────────────────────────╯
//                          ╰caps_word on double tap, not sure if I like it yet

// Layer switching
// #define SECLTHMB  &ltsk  MEDIA    LSHIFT  // tap for sticky shift : hold for media layer
// #define PRMLTHMB  &ltr   NUM      0      //  zero here because key-repeat does not take arguments
// #define TERLTHMB  &mt    LSHIFT   TAB   //   tap for tab : hold for shift

// #define TERRTHMB  &lt    NAV      SPACE
// #define PRMRTHMB  &mt    RC(BSPC) BSPC   // tap gives you backspace : long tap gives you delete word
// #define SECRTHMB  &ltsk  FUN      RCTRL //  tap for sticky ctrl : hold for function layer

// shorter codes
// #define BPSTE    &kp  K_PASTE
// #define BCPY     &kp  K_COPY
// #define BCUT     &kp  K_CUT
// #define BUNDO    &kp  K_UNDO
// #define BREDO    &kp  K_REDO
// #define BPREV    &kp  K_PREV
// #define BNEXT    &kp  K_NEXT
// #define BPLYPSE  &kp  K_PP
// #define BMUTE    &kp  K_MUTE
// #define BSTOP    &kp  K_STOP2
// #define BVOLD    &kp  K_VOL_DN
// #define BVOLU    &kp  K_VOL_UP
// #define OUTTOG   &out OUT_TOG // toggle keyboard output bluetooth/usb
// #define ___      &trans      //  transparent
// #define _x_      &none

// Home row mods
// #define HRML(k1, k2, k3, k4) &hml LSHFT k1 &hml LCTRL k2 &hml LALT  k3 &hml LGUI  k4
// #define HRMR(k1, k2, k3, k4) &hmr RGUI  k1 &hmr RALT  k2 &hmr RCTRL k3 &hmr RSHFT k4

/ {
  // 5x3 Layout
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer { // layer 0 (default)
    label = "Base";
    bindings = <
// ╭─────────────────────────────────────────────────────────────────────╮   ╭─────────────────────────────────────────────────────────────────────╮
// │      Q      │      W      │      E      │      R      │      T      │   │      Y      │      U      │      I      │      O      │      P      │
      &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │      A      │      S      │      D      │      F      │      G      │   │      H      │      J      │      K      │      L      │      ;      │
      &kp A         &kp S         &kp D         &kp F         &kp G             &kp H         &kp J         &kp K         &kp L         &kp SEMI
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │      Z      │      X      │      C      │      V      │      B      │   │      N      │      M      │      ,      │      .      │      /      │
      &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &kp COMMA      &kp DOT       &kp FSLH
// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
//                             │      DEL    │      ESC    │  (BSPC, 1)  │   │  (ENTR, 2)  │    SPACE    │     TAB     │
                                  &kp DEL       &kp ESC       &kp BSPC           &kp RET    &kp SPACE      &kp TAB
//                             ╰─────────────────────────────────────────╯   ╰─────────────────────────────────────────╯
      >;
    };
    
    lower_layer { // layer 1 (lower)
    label = "Lower";
    bindings = <
// ╭─────────────────────────────────────────────────────────────────────╮   ╭─────────────────────────────────────────────────────────────────────╮
// │      !      │      @      │      {      │      }      │      %      │   │      -      │      7      │      8      │      9      │      '      │
      &kp EXCL      &kp AT        &kp LBRC      &kp RBRC      &kp PRCNT        &kp KP_MINUS   &kp KP_N7     &kp KP_N8     &kp KP_N9      &kp SQT
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │      =      │      &      │      (      │      )      │      *      │   │      +      │      4      │      5      │      6      │      "      │
      &kp EQUAL     &kp AMPS      &kp LPAR      &kp RPAR      &kp STAR         &kp KP_PLUS    &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp DQT
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │      $      │      #      │      [      │      ]      │      ^      │   │      .      │      1      │      2      │      3      │      \      │
      &kp DLLR      &kp HASH      &kp LBKT      &kp RBKT      &kp CARET        &kp KP_DOT     &kp KP_N1     &kp KP_N2     &kp KP_N3      &kp BSLH
// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
//                             │             │             │    HELD_    │   │  (KP_0, 3)  │      _      │             │
                                   &trans        &trans         &trans          &kp KP_N0     &kp UNDER      &trans
//                             ╰─────────────────────────────────────────╯   ╰─────────────────────────────────────────╯
      >;
    };

    raised_layer { // layer 2 (raised)
    label = "Raised";
    bindings = <
// ╭─────────────────────────────────────────────────────────────────────╮   ╭─────────────────────────────────────────────────────────────────────╮
// │      F1     │      F2     │      F3     │      F4     │             │   │      HOME   │      DEL    │      INS    │      END    │      ~      │
      &kp F1        &kp F2        &kp F3        &kp F4        &pipe_td          &kp HOME      &kp DEL       &kp INS       &kp END       &kp TILDE
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │      F5     │      F6     │      F7     │      F8     │             │   │      ←      │      ↓      │      ↑      │      →      │      '      │
      &kp F5        &kp F6        &kp F7        &kp F8        &arrw_td           &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &kp GRAVE
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │      F9     │     F10     │     F11     │     F12     │             │   │             │      Pg_Dn  │      Pg_Up  │             │      |      │
      &kp F9       &kp F10       &kp F11       &kp F12        &wlrus_td           &none       &kp PG_DN     &kp PG_UP       &none       &kp PIPE
// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
//                             │             │             │  (BSPC, 3)  │   │    _HELD    │             │             │
                                   &trans        &trans         &none             &trans        &trans        &trans
//                             ╰─────────────────────────────────────────╯   ╰─────────────────────────────────────────╯
      >;
    };
    adjust_layer { // layer 3 (adjust)
    label = "Adjust";
    bindings = <
// ╭───────────────────────────────────────────────────────────╮   ╭───────────────────────────────────────────────────────────╮
// │     ¡     │           │     É     │           │           │   │   PRTSC   │     Ú     │     Í     │     Ó     │   PAUSE   │
       &i_excl    &none       &acnt_e      &none       &none           &none      &acnt_u     &acnt_i     &acnt_o      &none
// ├───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┤
// │     Á     │           │           │           │           │   │   PREV    │   VolDn   │   VolUp   │   NEXT    │   PLAY    │
      &acnt_a      &none       &none       &none       &none           &none       &none       &none       &none       &none
// ├───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┤
// │   BT 1    │   BT 2    │   BT 3    │   BT NXT  │   BT PRV  │   │     Ñ     │   MUTE    │           │     °     │     ¿     │
       &none       &none       &none       &none       &none           &ene        &none       &none      &dgree      &i_qmrk
// ╰───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────╯
//                         │           │           │   HELD_   │   │   _HELD   │           │           │
                               &trans      &trans     &trans           &trans      &trans      &trans
//                         ╰───────────────────────────────────╯   ╰───────────────────────────────────╯
      >;
    };
  };

  

  // Condition to enter adjust layer
  conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer {
          if-layers = <1 2>;
          then-layer = <3>;
      };
  };
};

/ {
    behaviors {
        // Tap Dance
        arrw_td: arrow_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&s_arrw>, <&b_arrow>;
        };

        pipe_td: pipe_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&pipe>, <&b_pipe>;
        };

        wlrus_td: wallrus_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&f_arrw>, <&wlrus>;
        };
    };
    
    // Accent letters
    acnt_a: accent_a {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&l_a>, <&u_a>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

    acnt_e: accent_e {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&l_e>, <&u_e>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    acnt_i: accent_i {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&l_i>, <&u_i>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    acnt_o: accent_o {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&l_o>, <&u_o>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    acnt_u: accent_u {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&l_u>, <&u_u>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    ene: ene {
        compatible = "zmk,behavior-mod-morph";
        bindings = <&l_n>, <&u_n>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
};

/ {
    macros {
        // PROGRAMMING SYNTAX
        s_arrw: slim_arrow { // ->
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp MINUS>,
                <&macro_tap>,
                <&kp GREATER_THAN>;
        };

        b_arrw: back_arrow { // <-
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LESS_THAN>,
                <&macro_tap>,
                <&kp MINUS>;
        };
        
        f_arrw: fat_arrow { // =>
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_tap>,
                <&kp GREATER_THAN>;
        };

        pipe: pipe_op { // |>
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp PIPE>,
                <&macro_tap>,
                <&kp GREATER_THAN>;
        };

        b_pipe: back_pipe_op { // ~>
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp TILDE>,
                <&macro_tap>,
                <&kp GREATER_THAN>;
        };

        wlrus: wallrus { // :=
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp COLON>,
                <&macro_tap>,
                <&kp EQUAL>;
        };

        // ACCENT LETTERS
        l_a: acnt_a { // á
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_0>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "ACNT_A";
        };

        u_a: upr_acnt_a { // Á
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_9 &kp KP_NUMBER_3>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "UPR_ACNT_A";
        };
        
        l_e: lwr_acnt_e { // é
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_NUMBER_0>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "LWR_ACNT_E";
        };
        
        u_e: upr_acnt_e { // É
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_4>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "UPR_ACNT_E";
        };
        
        l_i: lwr_acnt_i { // í
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "LWR_ACNT_I";
        };

        u_i: upr_acnt_i { // Í
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_0 &kp KP_NUMBER_5>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "UPR_ACNT_I";
        }

        l_o: lwr_acnt_o { // ó
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_2>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "LWR_ACNT_O";
        };

        u_o: upr_acnt_o { // Ó
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_1 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "UPR_ACNT_O";
        };
        
        l_u: lwr_acnt_u { // ú
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_3>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "LWR_ACNT_U";
        };

        u_u: upr_acnt_u { // Ú
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_1 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "UPR_ACNT_U";
        };

        l_n: ene { // ñ
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_4>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "ENE";
        };

        u_n: upr_ene { // Ñ
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_5>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "UPR_ENE";
        };

        i_excl: inv_excl { // ¡
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;
        };

        i_qmrk: inv_qmrk { // ¿
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_9 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;
        };
    };

        dgree: degree { // °
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_7 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;
        };
    };
};